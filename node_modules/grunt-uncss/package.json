{
  "name": "grunt-uncss",
  "description": "A grunt task for generating CSS files containing only those styles used in your project.",
  "version": "0.4.4",
  "homepage": "https://github.com/addyosmani/grunt-uncss",
  "author": {
    "name": "Addy Osmani",
    "email": "addyosmani@gmail.com",
    "url": "http://addyosmani.com"
  },
  "maintainers": [
    {
      "name": "Addy Osmani",
      "email": "addyosmani@gmail.com",
      "url": "http://addyosmani.com"
    },
    {
      "name": "XhmikosR",
      "email": "xhmikosr@gmail.com",
      "url": "https://github.com/XhmikosR"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/addyosmani/grunt-uncss.git"
  },
  "bugs": {
    "url": "https://github.com/addyosmani/grunt-uncss/issues"
  },
  "license": "MIT",
  "keywords": [
    "gruntplugin",
    "uncss",
    "css"
  ],
  "files": [
    "tasks",
    "CHANGELOG.md",
    "LICENSE-MIT"
  ],
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "chalk": "~1.1.0",
    "maxmin": "~1.1.0",
    "uncss": "~0.12.1"
  },
  "devDependencies": {
    "chai": "~3.3.0",
    "grunt": "~0.4.5",
    "grunt-compare-size": "~0.4.0",
    "grunt-contrib-clean": "~0.6.0",
    "grunt-contrib-connect": "~0.11.2",
    "grunt-contrib-copy": "~0.8.0",
    "grunt-contrib-cssmin": "~0.14.0",
    "grunt-contrib-jshint": "~0.11.2",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-processhtml": "~0.3.8",
    "grunt-simple-mocha": "~0.4.0",
    "load-grunt-tasks": "~3.3.0",
    "mocha": "~2.3.2",
    "time-grunt": "~1.2.1"
  },
  "peerDependencies": {
    "grunt": ">=0.4.0"
  },
  "readme": "# grunt-uncss [![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\n\n[![NPM version](https://img.shields.io/npm/v/grunt-uncss.svg?)](https://www.npmjs.com/package/grunt-uncss)\n[![Linux Build Status](https://img.shields.io/travis/addyosmani/grunt-uncss/master.svg?label=Linux%20build)](https://travis-ci.org/addyosmani/grunt-uncss)\n[![Windows Build status](https://img.shields.io/appveyor/ci/addyosmani/grunt-uncss/master.svg?label=Windows%20build)](https://ci.appveyor.com/project/addyosmani/grunt-uncss/branch/master)\n[![Dependency Status](https://img.shields.io/david/addyosmani/grunt-uncss.svg)](https://david-dm.org/addyosmani/grunt-uncss)\n[![devDependency Status](https://img.shields.io/david/dev/addyosmani/grunt-uncss.svg)](https://david-dm.org/addyosmani/grunt-uncss#info=devDependencies)\n\n>A grunt task for removing unused CSS from your projects with [UnCSS](https://github.com/giakki/uncss). Works across multiple files and supports dynamically injected CSS via PhantomJS.\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the\n[Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create\na [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins.\nOnce you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-uncss --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-uncss');\n```\n\n**Issues with the output should be reported on the UnCSS [issue tracker](https://github.com/giakki/uncss/issues).**\n\n## Preview\n\nTaking a multi-page project using Bootstrap with >120KB of CSS down to 11KB.\n\n![Demo](http://i.imgur.com/uhWMALH.gif)\n\n## Uncss task\n\n*Run this task with the `grunt uncss` command.*\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\n## Options\n\nOptions are passed to [UnCSS](https://github.com/giakki/uncss/blob/0.12.0/README.md#within-nodejs). In addition this task defines an extra option:\n\n### report\n\nChoices: `'min'`, `'gzip'`  \nDefault: `'min'`\n\nReport minification result or both minification and gzip results.\nThis is useful to see exactly how well clean-css is performing but using `'gzip'` will make the task take 5-10x longer to complete. [Example output](https://github.com/sindresorhus/maxmin#readme).\n\n## Usage examples\n\nUse the `grunt-uncss` task by specifying a target destination (file) for your cleaned CSS.\nBelow this is `dist/css/tidy.css`.\n\nAlong-side, specify the input HTML files you would like scanned for used selectors.\nIn this case `app/index.html` and `app/about.html` are the two files we would like checked.\n\n```js\nuncss: {\n  dist: {\n    files: {\n      'dist/css/tidy.css': ['app/index.html', 'app/about.html']\n    }\n  }\n}\n```\n\nWhich you can then use alongside a processor like\n[processhtml](https://github.com/dciccale/grunt-processhtml) to\nrewrite the location of your stylesheet to `tidy.css` using a block like:\n\n```html\n<!-- build:css css/tidy.css -->\n<link rel=\"stylesheet\" href=\"css/normalize.css\">\n<link rel=\"stylesheet\" href=\"css/main.css\">\n<link rel=\"stylesheet\" href=\"css/bootstrap.css\">\n<!-- /build -->\n```\n\nand some configuration like:\n\n```js\nprocesshtml: {\n  dist: {\n    files: {\n      'dist/index.html': ['app/index.html'],\n      'dist/about.html': ['app/about.html']\n    }\n  }\n}\n```\n\n```js\n// Remove unused CSS across multiple files\nuncss: {\n  dist: {\n    files: {\n      'dist/css/tidy.css': ['app/index.html', 'app/about.html']\n    }\n  }\n}\n```\n\n```js\n// Remove unused CSS across multiple files and ignore specific selectors\nuncss: {\n  dist: {\n    options: {\n      ignore: ['#added_at_runtime', '.created_by_jQuery']\n    },\n    files: {\n      'dist/css/tidy.css': ['app/index.html', 'app/about.html']\n    }\n  }\n}\n```\n\n### Test project\n\nThere is a test project included under the `tests/app` directory which you can build by running `grunt` after an `npm install`.\nIt also includes a `grunt compare_size` task for getting a feel of the before and after CSS sizes:\n\n![grunt compare_size](http://i.imgur.com/bUseCPh.png)\n\n## Examples\n\n### Sites\n\n* [HTML5Boilerplate.com website](https://github.com/h5bp/html5boilerplate.com)\n* [Mozilla's DXR documentation viewer](https://github.com/mozilla/dxr)\n* [Vanilla forums docs site](https://github.com/vanilla/vanilla-docs)\n\n### Apps\n\n* [GitHub Team Viewer - Angular app](https://github.com/vinitkumar/github-team-viewer)\n* [Angular Todo application](https://github.com/JeremyCarlsten/grunt-uncss-angular-example)\n* [CashSplitter - Angular app with PouchDB, Bootstrap](https://github.com/carlo-colombo/CashSplitter)\n* [This Week's Comics Express app](https://github.com/WillsonSmith/thisWeeksComics)\n* [Sample grunt-uncss in a Sass project](https://github.com/addyosmani/grunt-uncss-sass-example)\n\n### Other\n\n* [Using grunt-uncss with Wordpress](https://github.com/sboodhoo/Grunt-UnCSS-WordPress)\n* [JSON Sitemap generator for grunt-uncss](https://github.com/phoenixMag00/JSON-Sitemap-Generator-for-Grunt-UnCSS-with-WordPress)\n\n## The problem\n\nUser-interface libraries like [Bootstrap](http://getbootstrap.com), [TopCoat](http://topcoat.io)\nand so on are fairly prolific, however many developers use less than 10% of the CSS they provide\n(when opting for the full build, which most do). As a result, they can end up with fairly bloated\nstylesheets which can significantly increase page load time and affect performance.\n`grunt-uncss` is an attempt to help with by generating a CSS file containing only the CSS used\nin your project, based on selector testing.\n\n## Research and alternative solutions\n\nThere have been many efforts to try solving the problem of finding unused CSS in the past. Opera created\n[ucss](https://github.com/oyvindeh/ucss), @aanand created <https://github.com/aanand/deadweight>,\nBrian Le Roux [CSS Slap Chop](https://github.com/brianleroux/css-slap-chop) and there were a number of\nclient-side solutions also crafted, such as [Helium-CSS](https://github.com/geuis/helium-css),\n[CSSESS](https://github.com/driverdan/cssess) and the Python [mincss](http://www.peterbe.com/plog/mincss).\n\nUnfortunately, most of these solutions don't actually generate what you're really after - a leaner build\nof your project CSS containing only those rules you used. Finding that a more recent project called\n[UnCSS](https://github.com/giakki/uncss) did try tackling this, I set out to share some of the problems we\nneed to solve in this space with the developer and build a Grunt task to enable usage of it in builds more\neasily.\n\nHuge thanks go out to Giacomo Martino for his help with the Node module this task uses.\n\n## Coverage\n\n* [Spring-cleaning unused CSS with Grunt, Gulp & other build systems](http://addyosmani.com/blog/removing-unused-css/)\n* [Automating the removal of unused CSS - VelocityConf](https://www.youtube.com/watch?v=833xr1MyE30)\n* [Use Grunt and UnCSS to speed up the load time of your site](http://xdamman.com/website-optimization-grunt-uncss)\n* [Foundation 5, Sass and Grunt UnCSS](https://corydowdy.com/blog/foundation-5-sass-and-grunt-uncss)\n* [Automating Front-end Workflow (slides)](https://speakerdeck.com/addyosmani/automating-front-end-workflow)\n* [Automatically removing unused CSS - Windows](http://deanhume.com/Home/BlogPost/automatically-removing-unused-css-using-grunt/6101)\n* [Workflow for responsive email with Grunt and UnCSS](https://medium.com/p/32d607879082)\n\n## WordPress\n\nWhile UnCSS works best (and quickest) with static html files, it is possible to pass in\na URL array that contains all the URLs on your website, and process all used selectors that way.\n[@lgladdy](https://github.com/lgladdy) wrote a guide on how to do this\n[on his blog](https://gladdy.uk/blog/2014/04/13/using-uncss-and-grunt-uncss-with-wordpress/)\n\n## Yeoman Generator\n\nIf you're looking for a webapp starting point with grunt-uncss integrated, see [generator-webapp-uncss](https://github.com/addyosmani/generator-webapp-uncss).\n\n## Limitations\n\nPlease note that the CSS parser used in the `uncss` module we rely on currently isn't able to work with complex selectors.\nFor example `[data-section=''] > section > [data-section-title] a`. This may mean that at build time you run into exceptions\nsuch as `TypeError: Cannot convert undefined or null to object`. If this is the case, please consider moving these selectors\nto a separate stylesheet which the task does not run on.\n\nWe are actively looking at how to improve the CSS parsers used and will update this notice once this problem has been solved.\n\n## Maintainers\n\n* [@addyosmani](https://github.com/addyosmani)\n* [@XhmikosR](https://github.com/XhmikosR)\n\n## License\n\n(C) Addy Osmani 2015, released under the MIT license\n",
  "readmeFilename": "README.md",
  "_id": "grunt-uncss@0.4.4",
  "dist": {
    "shasum": "ccc12d16226482be6740172bdae6b24fd27592fb"
  },
  "_from": "grunt-uncss@",
  "_resolved": "https://registry.npmjs.org/grunt-uncss/-/grunt-uncss-0.4.4.tgz"
}
